{"version":3,"sources":["App.js","utils/index.js","reportWebVitals.js","index.js"],"names":["Key","key","visual","this","_visual","_key","_done","_id","uuid","className","done","id","Space","initialState","validKeys","doneKeys","expectedKeys","totalKeys","failedKeys","passedKeys","LETTER_ARRAY","App","generateSequence","setState","max","state","group","i","push","length","Math","floor","random","groupAmount","handleInputChange","event","preventDefault","firstExpectedEl","isValid","validate","invalidate","slice","handleCheckboxChange","letter","includes","filter","round","map","type","checked","toLowerCase","onChange","onClick","keyClass","element","contentEditable","suppressContentEditableWarning","onKeyPress","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72c0b469.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\n\nimport { v4 as uuid } from 'uuid';\n\nimport { getRandomInt } from './utils';\n\nclass Key {\n  constructor(key, visual = key) {\n    this._visual = visual;\n    this._key = key;\n\n    this._done = null;\n\n    this._id = uuid();\n  }\n\n  validate() {\n    this._done = true;\n  }\n\n  invalidate() {\n    this._done = false;\n  }\n\n  get element() {\n    let className = 'key';\n\n    if (this.done === true) className += ' valid';\n    if (this.done === false) className += ' invalid';\n\n    return (\n      <span className={className} key={this.id}>\n        {this.visual}\n      </span>\n    );\n  }\n\n  get key() {\n    return this._key;\n  }\n\n  get visual() {\n    return this._visual;\n  }\n\n  get done() {\n    return this._done;\n  }\n\n  get id() {\n    return this._id;\n  }\n}\n\nclass Space extends Key {\n  constructor() {\n    super(' ', '_');\n  }\n}\n\nconst initialState = {\n  validKeys: ['q', 's', 'd', 'f', 'j', 'k', 'l', 'm'],\n  doneKeys: [],\n  expectedKeys: [],\n  totalKeys: 0,\n  failedKeys: 0,\n  passedKeys: 0,\n};\n\nconst LETTER_ARRAY = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = initialState;\n  }\n\n  generateSequence = () => {\n    const rowSize = 4;\n    const groupAmount = 4;\n\n    this.setState({\n      doneKeys: [],\n      expectedKeys: [],\n    });\n\n    const validKeys = this.state.validKeys;\n\n    let group = [];\n\n    for (let i = 0; i < groupAmount; i++) {\n      for (let i = 0; i < rowSize; i++)\n        group.push(validKeys.length === 1 ? new Key(validKeys[0]) : new Key(validKeys[getRandomInt(validKeys.length - 1)]));\n\n      if (i !== groupAmount - 1) group.push(new Space());\n    }\n\n    this.setState({\n      expectedKeys: group,\n    });\n  };\n\n  handleInputChange = (event) => {\n    event.preventDefault();\n\n    const firstExpectedEl = this.state.expectedKeys[0];\n    const isValid = firstExpectedEl.key === event.key;\n\n    if (isValid) firstExpectedEl.validate();\n    else firstExpectedEl.invalidate();\n\n    if (firstExpectedEl.key !== event.key) this.generateSequence();\n\n    this.setState({\n      doneKeys: [...this.state.doneKeys, firstExpectedEl],\n      expectedKeys: this.state.expectedKeys.slice(1),\n\n      totalKeys: this.state.totalKeys + 1,\n\n      failedKeys: isValid ? this.state.failedKeys : this.state.failedKeys + 1,\n      passedKeys: isValid ? this.state.passedKeys + 1 : this.state.passedKeys,\n    });\n\n    if (this.state.expectedKeys.length === 1) this.generateSequence();\n  };\n\n  handleCheckboxChange = (letter) => {\n    // TODO : Prevent default if only one letter remaining.\n\n    const arrayIncludeLetter = this.state.validKeys.includes(letter);\n    if (arrayIncludeLetter) this.setState({ validKeys: this.state.validKeys.filter((key) => key !== letter) });\n    else this.setState({ validKeys: [...this.state.validKeys, letter] });\n  };\n\n  componentDidMount() {\n    this.generateSequence();\n  }\n\n  render() {\n    // TODO : Patch NaN error percentage.\n\n    return (\n      <div className='container'>\n        <div className='config'>\n          <div className='counters'>\n            <p>Errors : {Math.round((this.state.failedKeys / this.state.totalKeys) * 100)}%</p>\n            <p>Total : {this.state.totalKeys}</p>\n          </div>\n          <div className='char-picker'>\n            {LETTER_ARRAY.map((letter) => {\n              return (\n                <div key={letter}>\n                  <input\n                    type='checkbox'\n                    checked={this.state.validKeys.includes(letter.toLowerCase())}\n                    onChange={() => this.handleCheckboxChange(letter.toLowerCase())}\n                  />\n                  {letter}\n                </div>\n              );\n            })}\n            <button className='regen-button' onClick={this.generateSequence}>\n              Re-generate !\n            </button>\n          </div>\n        </div>\n        <div className='text-progression'>\n          {this.state.doneKeys.map((keyClass, i) => keyClass.element)}\n          {this.state.expectedKeys.map((keyClass, i) => keyClass.element)}\n        </div>\n        <p type='text' className='text-input' contentEditable={true} suppressContentEditableWarning={true} onKeyPress={this.handleInputChange}></p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const getRandomInt = (max) => {\n  return Math.floor(Math.random() * Math.floor(max + 1)); // 0 and max included\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}